image: node:lts

variables:
  TIMEZONE: "Europe/Berlin"


stages:
  - test
  - deployment

pages:
  variables:
    GIT_STRATEGY: clone
  stage: deployment
  script:
    - npm ci
    - FORCE_SHOW_EDIT_PAGE_LINK=true CI=true npm run documentation
    - mv build/docs public
  artifacts:
    paths:
      - public


test:
  image: ubuntu:latest
  stage: test
  tags:
    - testing
  variables:
    # Set the Docker host to be the one of the previously created service (This forwards the user of the docker command to this service instead of running it inside the container of this build job.)
    DOCKER_HOST: /var/run/docker.sock
    # By GitLab recommended storage driver when using Docker-in-Docker (see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver)
    DOCKER_DRIVER: overlay2
    # Disable the need for certificates when this build job communicates with the Docker service
    # If you want to secure the communication between the container of this build job and the Docker service you have to slightly change the configuration of the GitLab runner. (see https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/)
    # Since in my case everything is running on the same server I can live with this communication not being encrypted.
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - sh -c 'echo "127.0.0.11 proxy.local\n" >> /etc/hosts'
    - apt update -yy
    - apt install -yy curl  ca-certificates   sudo  gnupg     lsb-release
    - curl -L "https://github.com/docker/compose/releases/download/v2.3.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - docker compose -f deployments/testing/docker-compose.yml up -d
#    - mkdir -p /etc/apt/keyrings
#    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#    - apt update -yy
#    - apt install -yy docker-ce docker-ce-cli containerd.io docker-compose-plugin
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    - nvm install 16 && nvm use 16 && nvm alias default 16
    - npm install -g npm@latest
    - npm ci
    - set -x
    - set -x
    - sleep 60
    - npm test

