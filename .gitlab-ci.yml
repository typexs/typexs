# https://medium.com/devops-with-valentine/how-to-start-a-docker-container-inside-your-gitlab-ci-pipeline-bfeb610c3f4
image: node:lts

variables:
  TIMEZONE: "Europe/Berlin"


stages:
  - build
  - test
  - deployment


build docker image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"username\":\"${CI_REGISTRY_USER}\",\"password\":\"${CI_REGISTRY_PASSWORD}\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context="${CI_PROJECT_DIR}"
      --dockerfile="${CI_PROJECT_DIR}/services/ubuntu-docker/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/ubuntu-docker"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      changes:
        - .gitlab-ci.yml
        - services/**/*


pages:
  variables:
    GIT_STRATEGY: clone
  stage: deployment
  script:
    - npm ci
    - FORCE_SHOW_EDIT_PAGE_LINK=true CI=true npm run documentation
    - mv build/docs public
  artifacts:
    paths:
      - public

test:
  image: ${CI_REGISTRY_IMAGE}/ubuntu-docker
  stage: test
  tags:
    - testing
    #  variables:
    # Set the Docker host to be the one of the previously created service (This forwards the user of the docker command to this service instead of running it inside the container of this build job.)
    # DOCKER_HOST: unix:///var/run/docker.sock
    # By GitLab recommended storage driver when using Docker-in-Docker (see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-overlayfs-driver)
    # DOCKER_DRIVER: overlay2
    # Disable the need for certificates when this build job communicates with the Docker service
    # If you want to secure the communication between the container of this build job and the Docker service you have to slightly change the configuration of the GitLab runner. (see https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/)
    # Since in my case everything is running on the same server I can live with this communication not being encrypted.
    # DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - sh -c 'echo "127.0.0.11 proxy.local\n" >> /etc/hosts'
    - docker compose -f deployments/testing/docker-compose.yml up -d
    - cat /etc/hosts
    - docker compose -f deployments/testing/docker-compose.yml ps
    - netstat -a
  script:
    - node -v
    - npm -v
    - nc -zvw3 127.0.0.1 6379 || true
    - nc -zvw3 172.17.0.2 6379 || true
    - nc -zvw3 docker 6379 || true
    - npm ci
    - npm test
  after_script:
    - docker compose -f deployments/testing/docker-compose.yml down

